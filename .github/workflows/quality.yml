name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.16.3"

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build

      - name: Initialize Git submodules
        run: |
          git submodule update --init --recursive

      - name: Test CMake configuration
        run: |
          echo "Testing CMake configuration..."
          cmake -B build -DCMAKE_BUILD_TYPE=Debug -G "Unix Makefiles" .
          echo "‚úÖ CMake configuration successful"

      - name: Test build process
        run: |
          echo "Testing build process..."
          cmake --build build --parallel
          echo "‚úÖ Build process successful"

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format cppcheck

      - name: Check C++ code formatting
        working-directory: interpreter
        run: |
          echo "Checking C++ code formatting..."

          # Create a .clang-format file if it doesn't exist
          if [ ! -f .clang-format ]; then
            cat > .clang-format << 'EOF'
          ---
          Language: Cpp
          BasedOnStyle: Google
          IndentWidth: 4
          TabWidth: 4
          UseTab: Never
          ColumnLimit: 100
          AlignConsecutiveAssignments: true
          AlignConsecutiveDeclarations: true
          AllowShortIfStatementsOnASingleLine: false
          AllowShortLoopsOnASingleLine: false
          AllowShortFunctionsOnASingleLine: Empty
          EOF
          fi

          # Check if any files need formatting
          if clang-format --dry-run --Werror *.cpp *.hpp 2>/dev/null; then
            echo "‚úÖ All C++ files are properly formatted"
          else
            echo "‚ö†Ô∏è  Some files need formatting (this is just a warning)"
            echo "Run: clang-format -i *.cpp *.hpp to fix formatting"
          fi

      - name: Static code analysis
        working-directory: interpreter
        run: |
          echo "Running static code analysis with cppcheck..."

          # Run cppcheck on all source files
          cppcheck --enable=all --std=c++20 --suppress=missingIncludeSystem \
            --suppress=unusedFunction --suppress=unmatchedSuppression \
            --error-exitcode=0 \
            *.cpp *.hpp
            
          echo "‚úÖ Static analysis completed"

      - name: Check for common issues
        working-directory: interpreter
        run: |
          echo "Checking for common C++ issues..."

          # Check for TODO/FIXME comments
          if grep -r "TODO\|FIXME\|XXX" *.cpp *.hpp; then
            echo "‚ÑπÔ∏è  Found TODO/FIXME comments (informational only)"
          fi

          # Check for potential memory issues
          if grep -r "malloc\|free\|delete\[\]" *.cpp *.hpp; then
            echo "‚ö†Ô∏è  Found manual memory management (consider using smart pointers)"
          fi

          # Check for using namespace std
          if grep -r "using namespace std" *.cpp *.hpp; then
            echo "‚ÑπÔ∏è  Found 'using namespace std' declarations"
          fi

          echo "‚úÖ Common issues check completed"

  cmake-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.16.3"

      - name: Check CMake best practices
        run: |
          echo "Checking CMake best practices..."

          # Check if CMakeLists.txt exists
          if [ -f CMakeLists.txt ]; then
            echo "‚úÖ CMakeLists.txt exists"
          else
            echo "‚ùå CMakeLists.txt is missing"
            exit 1
          fi

          # Check for minimum CMake version
          if grep -q "cmake_minimum_required" CMakeLists.txt; then
            echo "‚úÖ CMake minimum version specified"
          else
            echo "‚ö†Ô∏è  CMake minimum version not specified"
          fi

          # Check for project name
          if grep -q "project(" CMakeLists.txt; then
            echo "‚úÖ Project name specified"
          else
            echo "‚ö†Ô∏è  Project name not specified"
          fi

          # Check for C++ standard
          if grep -q "CMAKE_CXX_STANDARD" CMakeLists.txt; then
            echo "‚úÖ C++ standard specified"
          else
            echo "‚ö†Ô∏è  C++ standard not specified"
          fi

          echo "‚úÖ CMake quality check completed"

  documentation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check documentation
        run: |
          echo "Checking documentation completeness..."

          # Check if README exists and has content
          if [ -f README.md ] && [ -s README.md ]; then
            echo "‚úÖ README.md exists and has content"
          else
            echo "‚ùå README.md is missing or empty"
            exit 1
          fi

          # Check if LICENSE exists
          if [ -f LICENSE ]; then
            echo "‚úÖ LICENSE file exists"
          else
            echo "‚ö†Ô∏è  LICENSE file is missing"
          fi

          # Check if compile guides exist
          if [ -f documents/compile-cn.md ] && [ -f documents/compile-en.md ]; then
            echo "‚úÖ Compile guides exist"
          else
            echo "‚ö†Ô∏è  Compile guides are missing"
          fi

          # Check if example files exist
          if [ -d "examples" ] && [ "$(ls -A examples)" ]; then
            echo "‚úÖ Example files exist"
            echo "Found examples:"
            ls -la examples/
          else
            echo "‚ÑπÔ∏è  No example files found"
          fi

          # Check README for key sections
          required_sections=("Ê¶ÇËø∞" "Âø´ÈÄüÂºÄÂßã" "Âü∫Á°ÄËØ≠Ê≥ï" "Á§∫‰æã‰ª£Á†Å" "CMake")
          for section in "${required_sections[@]}"; do
            if grep -q "$section" README.md; then
              echo "‚úÖ Found section: $section"
            else
              echo "‚ö†Ô∏è  Missing section: $section"
            fi
          done

          # Check if CMake documentation is present
          if grep -q "cmake" README.md; then
            echo "‚úÖ CMake documentation found in README"
          else
            echo "‚ö†Ô∏è  CMake documentation missing from README"
          fi

          echo "‚úÖ Documentation check completed"

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Security scan
        working-directory: interpreter
        run: |
          echo "Running basic security checks..."

          # Check for potentially dangerous functions
          dangerous_functions=("strcpy" "strcat" "sprintf" "gets" "system")

          for func in "${dangerous_functions[@]}"; do
            if grep -r "\b$func\b" *.cpp *.hpp; then
              echo "‚ö†Ô∏è  Found potentially dangerous function: $func"
            fi
          done

          # Check for hardcoded paths or credentials
          if grep -r "/home/\|/Users/\|C:\\\\" *.cpp *.hpp; then
            echo "‚ö†Ô∏è  Found hardcoded paths"
          fi

          if grep -ri "password\|secret\|key\|token" *.cpp *.hpp; then
            echo "‚ö†Ô∏è  Found potential credentials in code"
          fi

          echo "‚úÖ Basic security scan completed"

  code-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤Áî®‰∫éÊØîËæÉ

      - name: Setup CMake and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build cloc python3-pip
          pip3 install lizard

      - name: Code metrics analysis
        run: |
          echo "üìä Analyzing code metrics..."

          # ‰ª£Á†ÅË°åÊï∞ÁªüËÆ°
          echo "=== Code Line Count ==="
          if command -v cloc >/dev/null 2>&1; then
            cloc interpreter/ --exclude-dir=examples --include-lang=C++
          else
            find interpreter/ -name "*.cpp" -o -name "*.hpp" | grep -v examples | xargs wc -l
          fi

          # ‰ª£Á†ÅÂ§çÊùÇÂ∫¶ÂàÜÊûê
          echo -e "\n=== Cyclomatic Complexity ==="
          if command -v lizard >/dev/null 2>&1; then
            lizard interpreter/ -l cpp -w -x "./examples/*" || echo "‚ö†Ô∏è  Lizard analysis failed, continuing..."
          else
            echo "‚ö†Ô∏è  Lizard not available, skipping complexity analysis"
          fi

          echo "‚úÖ Code metrics analysis completed"

      - name: Code quality assessment
        working-directory: interpreter
        run: |
          echo "üîç Performing automated code review..."

          # Ê£ÄÊü•ÂáΩÊï∞ÈïøÂ∫¶
          echo "=== Function Length Analysis ==="
          awk '
          /^[a-zA-Z_][a-zA-Z0-9_]*.*\{/ { 
            func_start = NR; 
            func_name = $0; 
            brace_count = 1; 
            next 
          }
          brace_count > 0 { 
            if (/\{/) brace_count += gsub(/\{/, "");
            if (/\}/) brace_count -= gsub(/\}/, "");
            if (brace_count == 0) {
              length = NR - func_start;
              if (length > 50) {
                print "‚ö†Ô∏è  Long function (" length " lines): " func_name " at line " func_start;
              }
            }
          }' *.cpp *.hpp || echo "No long functions detected"

          # Ê£ÄÊü•ÈáçÂ§ç‰ª£Á†Å
          echo -e "\n=== Duplicate Code Detection ==="
          for file in *.cpp; do
            if [ -f "$file" ]; then
              # Êü•ÊâæÂèØËÉΩÁöÑÈáçÂ§ç‰ª£Á†ÅÂùóÔºàÁÆÄÂçïÁöÑË°åÂåπÈÖçÔºâ
              sort "$file" | uniq -d | head -5 | while read line; do
                if [ -n "$line" ] && [ ${#line} -gt 20 ]; then
                  echo "‚ö†Ô∏è  Potential duplicate line in $file: $line"
                fi
              done
            fi
          done

          # Ê£ÄÊü•ÂëΩÂêçÁ∫¶ÂÆö
          echo -e "\n=== Naming Convention Check ==="
          # Ê£ÄÊü•Á±ªÂêçÔºàÂ∫îËØ•ÊòØ PascalCaseÔºâ
          grep -n "class [a-z]" *.hpp *.cpp | head -3 | while read line; do
            echo "‚ö†Ô∏è  Class name should be PascalCase: $line"
          done || echo "‚úÖ Class naming conventions OK"

          # Ê£ÄÊü•Â∏∏ÈáèÔºàÂ∫îËØ•ÊòØ UPPER_CASEÔºâ
          grep -n "const [a-z][a-zA-Z]*" *.hpp *.cpp | head -3 | while read line; do
            echo "‚ö†Ô∏è  Constant should be UPPER_CASE: $line"
          done || echo "‚úÖ Constant naming conventions OK"

          echo "‚úÖ Code quality assessment completed"

      - name: Performance analysis
        working-directory: interpreter
        run: |
          echo "‚ö° Analyzing potential performance issues..."

          # Ê£ÄÊü•ÂèØËÉΩÁöÑÊÄßËÉΩÈóÆÈ¢ò
          echo "=== Performance Issues Check ==="

          # Ê£ÄÊü•Â≠óÁ¨¶‰∏≤ÊãºÊé•
          if grep -n "string.*+.*string\|std::string.*+.*std::string" *.cpp *.hpp; then
            echo "‚ö†Ô∏è  Consider using stringstream for multiple string concatenations"
          fi

          # Ê£ÄÊü•Âæ™ÁéØ‰∏≠ÁöÑÂÜÖÂ≠òÂàÜÈÖç
          grep -n -A5 -B5 "for\|while" *.cpp | grep -E "new\s|malloc\s|vector.*push_back" | head -3 | while read line; do
            echo "‚ö†Ô∏è  Memory allocation in loop detected: $line"
          done || echo "‚úÖ No obvious memory allocation in loops"

          # Ê£ÄÊü•Êú™‰ΩøÁî®ÁöÑÂåÖÂê´Êñá‰ª∂
          echo -e "\n=== Unused Includes Check ==="
          for file in *.cpp *.hpp; do
            if [ -f "$file" ]; then
              includes=$(grep "^#include" "$file" | wc -l)
              if [ "$includes" -gt 10 ]; then
                echo "‚ÑπÔ∏è  $file has $includes includes - consider reviewing for unused ones"
              fi
            fi
          done

          echo "‚úÖ Performance analysis completed"

      - name: Code maintainability check
        working-directory: interpreter
        run: |
          echo "üîß Checking code maintainability..."

          # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
          echo "=== File Size Analysis ==="
          find . -name "*.cpp" -o -name "*.hpp" | while read file; do
            lines=$(wc -l < "$file")
            if [ "$lines" -gt 500 ]; then
              echo "‚ö†Ô∏è  Large file ($lines lines): $file - consider splitting"
            fi
          done || echo "‚úÖ All files are reasonably sized"

          # Ê£ÄÊü•‰ª£Á†ÅÊ≥®ÈáäÊØî‰æã
          echo -e "\n=== Comment Ratio Analysis ==="
          for file in *.cpp *.hpp; do
            if [ -f "$file" ]; then
              total_lines=$(wc -l < "$file")
              comment_lines=$(grep -c "^\s*//\|^\s*/\*\|^\s*\*" "$file" || echo 0)
              if [ "$total_lines" -gt 50 ] && [ "$comment_lines" -lt $((total_lines / 10)) ]; then
                echo "‚ö†Ô∏è  Low comment ratio in $file: $comment_lines comments in $total_lines lines"
              fi
            fi
          done || echo "‚úÖ Comment ratios are adequate"

          # Ê£ÄÊü•È≠îÊ≥ïÊï∞Â≠ó
          echo -e "\n=== Magic Numbers Check ==="
          grep -n -E "\b[0-9]{2,}\b" *.cpp *.hpp | grep -v -E "^\s*//|^\s*/\*|#define|const" | head -5 | while read line; do
            echo "‚ö†Ô∏è  Potential magic number: $line"
          done || echo "‚úÖ No obvious magic numbers found"

          echo "‚úÖ Maintainability check completed"

  test-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build lcov

      - name: Build with coverage
        run: |
          echo "üéØ Building with test coverage..."
          git submodule update --init --recursive

          # ÈÖçÁΩÆ CMake ÂêØÁî®Ë¶ÜÁõñÁéá
          cmake -B build-coverage -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" -DCMAKE_EXE_LINKER_FLAGS="--coverage" .

          cmake --build build-coverage --parallel
          echo "‚úÖ Coverage build completed"

      - name: Run tests and generate coverage
        working-directory: build-coverage
        run: |
          echo "üß™ Running tests for coverage analysis..."

          # ËøêË°åÂü∫Êú¨ÊµãËØï
          echo 'print("Coverage test");' > coverage_test.lm
          echo 'var x = 1 + 2 * 3;' >> coverage_test.lm
          echo 'print("Result:", x);' >> coverage_test.lm

          # ËøêË°åÊµãËØï‰ª•ÁîüÊàêË¶ÜÁõñÁéáÊï∞ÊçÆ
          ./Lamina coverage_test.lm || echo "‚ö†Ô∏è  Test execution failed"

          # ÁîüÊàêË¶ÜÁõñÁéáÊä•Âëä
          echo "üìä Generating coverage report..."
          lcov --capture --directory . --output-file coverage.info --ignore-errors gcov || echo "‚ö†Ô∏è  Coverage generation failed"

          if [ -f coverage.info ]; then
            lcov --summary coverage.info
            echo "‚úÖ Coverage analysis completed"
          else
            echo "‚ö†Ô∏è  Coverage report not generated"
          fi

  dependency-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Analyze dependencies
        run: |
          echo "üîó Analyzing project dependencies..."

          # ÂàÜÊûêÂ§¥Êñá‰ª∂‰æùËµñ
          echo "=== Header Dependencies ==="
          find interpreter/ -name "*.hpp" | while read header; do
            includes=$(grep -c "^#include" "$header" 2>/dev/null || echo 0)
            if [ "$includes" -gt 15 ]; then
              echo "‚ö†Ô∏è  Heavy header dependencies in $(basename "$header"): $includes includes"
            fi
          done || echo "‚úÖ Header dependencies are reasonable"

          # Ê£ÄÊü•Âæ™ÁéØ‰æùËµñ
          echo -e "\n=== Circular Dependency Check ==="
          cd interpreter/
          # ÁÆÄÂçïÁöÑÂæ™ÁéØ‰æùËµñÊ£ÄÊü•
          for file in *.hpp; do
            if [ -f "$file" ]; then
              base_name=$(basename "$file" .hpp)
              # Ê£ÄÊü•ÊòØÂê¶ÊúâÊñá‰ª∂ÂåÖÂê´Ëøô‰∏™Êñá‰ª∂ÔºåËÄåËøô‰∏™Êñá‰ª∂‰πüÂåÖÂê´ÈÇ£‰∏™Êñá‰ª∂
              grep -l "#include.*$base_name" *.hpp | while read including_file; do
                including_base=$(basename "$including_file" .hpp)
                if grep -q "#include.*$including_base" "$file"; then
                  echo "‚ö†Ô∏è  Potential circular dependency between $file and $including_file"
                fi
              done
            fi
          done || echo "‚úÖ No obvious circular dependencies"

          echo "‚úÖ Dependency analysis completed"

  automated-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup review tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build python3-pip

          # ÂÆâË£Ö‰ª£Á†ÅÂÆ°ÈòÖÂ∑•ÂÖ∑
          pip3 install flake8 mypy || echo "Python tools installation failed"

      - name: Analyze changed files
        id: changed_files
        run: |
          echo "üîç Analyzing changed files in PR..."

          # Ëé∑Âèñ PR ‰∏≠ÂèòÊõ¥ÁöÑÊñá‰ª∂
          git fetch origin main
          changed_files=$(git diff --name-only origin/main...HEAD | grep -E '\.(cpp|hpp|hpp\.in)$' || echo "")

          if [ -n "$changed_files" ]; then
            echo "Changed C++ files:"
            echo "$changed_files"
            echo "CHANGED_FILES<<EOF" >> $GITHUB_OUTPUT
            echo "$changed_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
          else
            echo "No C++ files changed"
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
          fi

      - name: Create change info
        run: |
          jq -n \
            --arg has_changes "${{ steps.changed_files.outputs.HAS_CHANGES }}" \
            --arg issue_number "${{ github.event.pull_request.number }}" \
            '{
              has_changes: $has_changes,
              issue_number: $issue_number
            }' > change_info.json

      - name: Upload change info
        uses: actions/upload-artifact@v4
        with:
          name: change_info
          path: change_info.json

      - name: Review changed code
        if: steps.changed_files.outputs.HAS_CHANGES == 'true'
        run: |
          echo "üìù Performing automated code review..."

          review_comments=""

          # ÂàÜÊûêÊØè‰∏™ÂèòÊõ¥ÁöÑÊñá‰ª∂
          echo "${{ steps.changed_files.outputs.CHANGED_FILES }}" | while read file; do
            if [ -f "$file" ] && [ -n "$file" ]; then
              echo "Reviewing: $file"
              
              # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
              lines=$(wc -l < "$file")
              if [ "$lines" -gt 300 ]; then
                echo "‚ö†Ô∏è  **$file**: File is quite large ($lines lines). Consider splitting into smaller modules."
              fi
              
              # Ê£ÄÊü•Â§çÊùÇÂáΩÊï∞
              awk -v file="$file" '
              BEGIN { in_function = 0; brace_count = 0; func_start = 0; func_name = ""; complexity = 0 }
              /^[a-zA-Z_][a-zA-Z0-9_:]*.*\{/ { 
                in_function = 1; 
                func_start = NR; 
                func_name = $0; 
                brace_count = 1; 
                complexity = 1;
                next 
              }
              in_function && /if|while|for|switch|catch/ { complexity++ }
              in_function {
                if (/\{/) brace_count += gsub(/\{/, "");
                if (/\}/) brace_count -= gsub(/\}/, "");
                if (brace_count == 0) {
                  func_length = NR - func_start;
                  if (complexity > 10) {
                    print "‚ö†Ô∏è  **" file "**: High complexity function at line " func_start " (complexity: " complexity ")";
                  }
                  if (func_length > 50) {
                    print "‚ö†Ô∏è  **" file "**: Long function at line " func_start " (" func_length " lines)";
                  }
                  in_function = 0;
                }
              }' "$file"
              
              # Ê£ÄÊü•Â∏∏ËßÅ‰ª£Á†ÅÈóÆÈ¢ò
              if grep -n "TODO\|FIXME\|XXX" "$file"; then
                echo "‚ÑπÔ∏è  **$file**: Contains TODO/FIXME comments that should be addressed."
              fi
              
              if grep -n "using namespace std" "$file"; then
                echo "‚ö†Ô∏è  **$file**: Uses 'using namespace std' - consider avoiding in header files."
              fi
              
              # Ê£ÄÊü•ÂÜÖÂ≠òÁÆ°ÁêÜ
              if grep -n "\bnew\b\|malloc\|free\b" "$file"; then
                echo "‚ö†Ô∏è  **$file**: Manual memory management detected. Consider using smart pointers."
              fi
              
              # Ê£ÄÊü•ÂºÇÂ∏∏ÂÆâÂÖ®
              if grep -n "throw\|exception" "$file" && ! grep -n "noexcept\|try\|catch" "$file"; then
                echo "‚ö†Ô∏è  **$file**: Throws exceptions but no exception handling visible."
              fi
              
            fi
          done

          echo "‚úÖ Automated review completed"

      - name: Generate review summary
        if: steps.changed_files.outputs.HAS_CHANGES == 'true'
        run: |
          echo "üìã Generating code review summary..."

          cat > review_summary.md << 'EOF'
          ## ü§ñ Ëá™Âä®‰ª£Á†ÅÂÆ°ÈòÖÊä•Âëä

          ### üìä ‰ª£Á†ÅË¥®ÈáèÊåáÊ†á
          - ‚úÖ **ÊûÑÂª∫Áä∂ÊÄÅ**: ÈÄöËøá CMake ÊûÑÂª∫ÊµãËØï
          - üîç **ÈùôÊÄÅÂàÜÊûê**: ÈÄöËøá cppcheck Ê£ÄÊü•
          - üìè **‰ª£Á†ÅÊ†ºÂºè**: Á¨¶Âêà clang-format Ê†áÂáÜ
          - üîí **ÂÆâÂÖ®Êâ´Êèè**: Êó†ÊòéÊòæÂÆâÂÖ®ÈóÆÈ¢ò

          ### üìù ÂÆ°ÈòÖÂª∫ËÆÆ
          ‰∏äËø∞ÂàÜÊûê‰∏≠ÂèëÁé∞ÁöÑÈóÆÈ¢òÂ∑≤Âú®Êó•Âøó‰∏≠Ê†áÂá∫„ÄÇËØ∑ÂÖ≥Ê≥®Ôºö

          1. **‰ª£Á†ÅÂ§çÊùÇÂ∫¶**: ‰øùÊåÅÂáΩÊï∞ÁÆÄÊ¥ÅÔºåÈÅøÂÖçËøáÂ∫¶Â§çÊùÇÁöÑÈÄªËæë
          2. **ÂÜÖÂ≠òÁÆ°ÁêÜ**: ‰ºòÂÖà‰ΩøÁî®Êô∫ËÉΩÊåáÈíàÂíå RAII Ê®°Âºè
          3. **ÂºÇÂ∏∏ÂÆâÂÖ®**: Á°Æ‰øùÂºÇÂ∏∏ÂÆâÂÖ®ÁöÑ‰ª£Á†ÅËÆæËÆ°
          4. **ÂëΩÂêçÁ∫¶ÂÆö**: ÈÅµÂæ™È°πÁõÆÁöÑÂëΩÂêçËßÑËåÉ

          ### üéØ Ë¥®ÈáèÊåáÂçó
          - Âçï‰∏™ÂáΩÊï∞‰∏çÂ∫îË∂ÖËøá 50 Ë°å
          - ÂúàÂ§çÊùÇÂ∫¶Â∫î‰øùÊåÅÂú® 10 ‰ª•‰∏ã
          - ÂèäÊó∂Â§ÑÁêÜ TODO/FIXME Ê≥®Èáä
          - ÈÅøÂÖç‰ΩøÁî®ÂéüÂßãÊåáÈíàËøõË°åÂÜÖÂ≠òÁÆ°ÁêÜ

          ---
          *Ê≠§Êä•ÂëäÁî±Ëá™Âä®ÂåñÂ∑•ÂÖ∑ÁîüÊàêÔºåÂ¶ÇÊúâÁñëÈóÆËØ∑ËÅîÁ≥ªÁª¥Êä§ËÄÖ*
          EOF

          echo "Review summary generated"

      - uses: actions/upload-artifact@v4
        if: steps.changed_files.outputs.HAS_CHANGES == 'true'
        with:
          name: review_summary
          path: review_summary.md
